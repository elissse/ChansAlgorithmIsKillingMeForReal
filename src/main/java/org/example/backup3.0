package org.example;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static java.lang.Math.*;

public class Main {
    public static int LEFT_TURN = 1;
    public static int RIGHT_TURN = -1;
    public static int COLLINEAR = 0;

    public static void main(String[] args) {
        Integer[][] points = {{4,0},{4,-4},{-3,4},{1,-1},{0,4},{-1,-2},{-4,0},{-1,1},{2,2},{-2,-1},{1,2},{0,-4}};
        List<List<Integer>> miniHulls = chan(points);
        // List<List<Integer[]>> miniHullsPoints = points(points, miniHulls);
        // jarvisMarch(points, miniHulls);
        List<Integer> jarvisssss = jarvisMarch(points, miniHulls);
        for (Integer x : jarvisssss) System.out.println(x);

        // System.out.println(tangent(3, points, miniHulls.get(0)));
    }

    public static List<List<Integer[]>> points(Integer[][] points, List<List<Integer>> miniHulls) {
        List<List<Integer[]>> pointsss = new ArrayList<>();
        for (int i = 0; i < miniHulls.size(); i++) {
            List<Integer[]> hull = new ArrayList<>();
            for (int j = 0; j < miniHulls.get(i).size(); j++) {
                hull.add(points[miniHulls.get(i).get(j)]);
            }
            pointsss.add(hull);
        }
        return pointsss;
    }

    public static List<List<Integer>> chan(Integer[][] points) {
        int n = points.length;
//        for (int t = 1; t < n; t++) {
        List<List<Integer>> miniHulls = new ArrayList<>();
        int m = 4;
        int r = (int) ceil(n / m);
        for (int i = 0; i < r; i++) {
            int start = i * m;
            int end = start + m - 1;
            miniHulls.add(graham(points, start, end));
        }
//        }
        for (List<Integer> list : miniHulls) {
            for (Integer p : list) {
                System.out.print(p + " ");
            }
            System.out.println();
        }
        return miniHulls;
    }

    public static int mod(int x, int n) {
        int r = x % n;
        return (r >= 0) ? r : r + n;
    }

    public static int tangent(int p, Integer[][] points, List<Integer> miniHull) {
        int l = 0;
        int r = miniHull.size() - 1;//is -1 needed here
        int lBefore = orient(points[p], points[miniHull.get(0)], points[miniHull.get(miniHull.size() - 1)]);
        int lAfter = orient(points[p], points[miniHull.get(0)], points[miniHull.get((l + 1) % miniHull.size())]);
        while (l < r) {
            int c = (l + r) / 2;
            int cBefore = orient(points[p], points[miniHull.get(c)], points[miniHull.get(mod(c - 1, miniHull.size()))]);
            int cAfter = orient(points[p], points[miniHull.get(c)], points[miniHull.get((c + 1) % miniHull.size())]);
            int cSide = orient(points[p], points[miniHull.get(l)], points[miniHull.get(c)]);
            if (cBefore != RIGHT_TURN && cAfter != RIGHT_TURN) return c;
            else if (((cSide == LEFT_TURN) && (lAfter == RIGHT_TURN || lBefore == lAfter)) || (cSide == RIGHT_TURN && cBefore == RIGHT_TURN)) {
                r = c;
            } else {
                l = c + 1;
            }
            lBefore = -cAfter;
            lAfter = orient(points[p], points[miniHull.get(l)], points[miniHull.get((l + 1) % miniHull.size())]);
        }
        return l;
    }

    public static int findNext(Integer[][] points, Integer[] leftmost, int p) {
        return 0;
    }

    public static List<Integer> jarvisMarch(Integer[][] points, List<List<Integer>> miniHulls) {
        List<Integer> hull = new ArrayList<>();
        int leftessst = miniHulls.get(0).get(0);
        int whichHull = 0;
        int index = 0;
        for (int i = 1; i < miniHulls.size(); i++) {
            for (int j = 0; j < miniHulls.get(i).size(); j++)
                if (points[leftessst][0] < points[miniHulls.get(i).get(j)][0]) {
                    leftessst = miniHulls.get(i).get(j);
                    whichHull = i;
                    index = j;
                }
        }
         System.out.println(leftessst);
        hull.add(leftessst);
        miniHulls.get(whichHull).remove(index);
        miniHulls.get(whichHull).add(hull.get(0));
        while (true) {
            Integer[] leftmost = new Integer[miniHulls.size()];
            Integer[] indexes = new Integer[miniHulls.size()];
            for (int h = 0; h < miniHulls.size(); h++) {
                if (miniHulls.get(h).size()!=0) {
                    indexes[h] = tangent(hull.get(hull.size() - 1), points, miniHulls.get(h));
                    leftmost[h] = miniHulls.get(h).get(indexes[h]);
                    //System.out.println(indexes[h] + "    " + leftmost[h]);
                }
            }

            Integer search = leftmost[0];
            whichHull = 0;
            index = indexes[0];
            for (int i = 1; i < leftmost.length; i++) {
              //  System.out.println(orient(points[hull.get(hull.size() - 1)], points[search], points[leftmost[i]]));
                if (orient(points[hull.get(hull.size() - 1)], points[search], points[leftmost[i]]) < 0) {
                    System.out.println(search + " " + whichHull + " " + index);
                    System.out.println(leftmost[i] + " " + i + " " + indexes[i]);
                    search = leftmost[i];
                    whichHull = i;
                    index = indexes[i];
                }
            }
            if (miniHulls.get(whichHull).get(index) == (hull.get(0))) {
                break;
            } else {
                hull.add(search);
                miniHulls.get(whichHull).remove(index);
            }
//            for(Integer x:miniHulls.get(0)) System.out.print(x+" ");
//            System.out.println();
//            for(Integer x:miniHulls.get(1)) System.out.print(x+" ");
//            System.out.println();
        }
        return hull;
    }

    public static List<Integer> jarvisss(Integer[][] points, List<List<Integer>> miniHulls) {
        int leftessst = miniHulls.get(0).get(0);
        int whichHull = 0;
        for (int i = 1; i < miniHulls.size(); i++) {
            if (points[leftessst][0] > points[miniHulls.get(i).get(0)][0]) {
                leftessst = miniHulls.get(i).get(0);
                whichHull = i;
            }

        }
        List<Integer> hull = new ArrayList<>();
        hull.add(leftessst);
        miniHulls.get(whichHull).remove(0);
        miniHulls.get(whichHull).add(hull.get(0));
        while (true) {
            Integer[] leftmost = new Integer[miniHulls.size()];
            for (int h = 0; h < miniHulls.size(); h++) {
                leftmost[h] = 0;
                for (int i = 0; i < miniHulls.get(h).size(); i++) {
                    if (orient(points[hull.get(hull.size() - 1)], points[miniHulls.get(h).get(leftmost[h])], points[miniHulls.get(h).get(i)]) > 0) {
                        leftmost[h] = i;
                    }
                }
            }
            for (Integer x : leftmost) System.out.println(x);
            leftessst = 0;
            for (int h = 0; h < miniHulls.size(); h++) {
                if (orient(points[hull.get(hull.size() - 1)], points[leftmost[leftessst]], points[leftmost[h]]) > 0) {
                    leftessst = leftmost[h];
                    whichHull = h;
                }
            }
            System.out.println(leftessst + " " + whichHull);
            if (miniHulls.get(whichHull).get(leftmost[leftessst]) == hull.get(0)) {
                break;
            } else {
                hull.add(miniHulls.get(whichHull).get(leftmost[leftessst]));
                miniHulls.get(whichHull).remove(leftmost[leftessst]);
            }
        }
        return hull;
    }

    public static List<Integer> jarvis(Integer[][] points, List<List<Integer>> miniHulls) {
        List<Integer> p = new ArrayList<>();
        for (List<Integer> list : miniHulls) {
            for (Integer i : list)
                p.add(i);
        }
        for (int i = 0; i < p.size(); i++) {
            if (points[p.get(i)][0] < points[p.get(0)][0]) {
                Integer t = p.get(i);
                p.set(i, p.get(0));
                p.set(0, t);
            }
        }
        List<Integer> hull = new ArrayList<>();
        hull.add(p.get(0));
        p.remove(0);
        p.add(hull.get(0));
        while (true) {
            int leftmost = 0;
            for (int i = 1; i < p.size(); i++) {
                if (orient(points[hull.get(hull.size() - 1)], points[p.get(leftmost)], points[p.get(i)]) > 0) {
                    leftmost = i;
                }
            }
            if (p.get(leftmost) == (hull.get(0))) {
                break;
            } else {
                hull.add(p.get(leftmost));
                p.remove(leftmost);
            }
        }
        return hull;
    }

    public static List<Integer> jarviss(Integer[][] points, List<List<Integer>> miniHulls) {
        int leftessst = miniHulls.get(0).get(0);
        int whichHull = 0;
        for (int i = 1; i < miniHulls.size(); i++) {
            if (points[leftessst][0] > points[miniHulls.get(i).get(0)][0]) {
                leftessst = miniHulls.get(i).get(0);
                whichHull = i;
            }
        }
        List<Integer> p = new ArrayList<>();
        for (List<Integer> list : miniHulls) {
            for (Integer i : list)
                p.add(i);
        }
        for (int i = 0; i < p.size(); i++) {
            if (points[p.get(i)][0] < points[p.get(0)][0]) {
                Integer t = p.get(i);
                p.set(i, p.get(0));
                p.set(0, t);
            }
        }
        List<Integer> hull = new ArrayList<>();
        hull.add(p.get(0));
        p.remove(0);
        p.add(hull.get(0));
        while (true) {
            int leftmost = 0;
            for (int i = 1; i < p.size(); i++) {
                if (orient(points[hull.get(hull.size() - 1)], points[p.get(leftmost)], points[p.get(i)]) > 0) {
                    leftmost = i;
                }
            }
            if (p.get(leftmost) == (hull.get(0))) {
                break;
            } else {
                hull.add(p.get(leftmost));
                p.remove(leftmost);
            }
        }
        return hull;
    }

    public static int dist(Integer[] a, Integer[] b) {
        return (a[0] - b[0]) * (a[0] - b[0]) - (a[1] - b[1]) * (a[1] - b[1]);
    }

    public static int compare(Integer leftmost, Integer[][] points, Integer i, Integer j) {
        int orientation = orient(points[leftmost], points[i], points[j]);
        if (orientation == 0)
            return (dist(points[leftmost], points[i]) >= dist(points[leftmost], points[j])) ? 1 : -1;
        return orientation;
    }

    public static void merge(Integer leftmost, Integer[][] points, Integer[] p, Integer[] l, Integer[] r, Integer left, Integer right) {
        Integer i = 0, j = 0, k = 0;
        while (i < left && j < right) {
            if (compare(leftmost, points, r[j], l[i]) > 0) {
                p[k++] = l[i++];
            } else {
                p[k++] = r[j++];
            }
        }
        while (i < left) {
            p[k++] = l[i++];
        }
        while (j < right) {
            p[k++] = r[j++];
        }
    }

    public static void mergeSort(Integer leftmost, Integer[][] points, Integer[] p) {
        int n = p.length;
        if (n < 2) {
            return;
        }
        Integer middle = n / 2;
        Integer[] l = new Integer[middle];
        Integer[] r = new Integer[n - middle];

        for (int i = 0; i < middle; i++) {
            l[i] = p[i];
        }
        for (Integer i = middle; i < n; i++) {
            r[i - middle] = p[i];
        }
        mergeSort(leftmost, points, l);
        mergeSort(leftmost, points, r);
        merge(leftmost, points, p, l, r, middle, n - middle);
    }

    public static Integer orient(Integer[] a, Integer[] b, Integer[] c) {
        int orientation = (b[0] - a[0]) * (c[1] - b[1]) - (b[1] - a[1]) * (c[0] - b[0]);
        if (orientation == 0) return 0;
        return orientation > 0 ? 1 : -1;
        // если > 0 значит с лежит слева от вектора ав
        // если < 0 значит с лежит справа от вектора ав
        // если = 0 значит с лежит на векторе ав
    }

    public static List<Integer> graham(Integer[][] points, int start, int end) {
        Integer n = end - start + 1;
        Integer[] p = new Integer[n];
        for (int i = start; i <= end; i++) {
            p[i - start] = i;
        }
        //searching for the leftmost point (point with lowest x)
        for (int i = 0; i < p.length; i++) {
            if (points[p[i]][0] > points[p[0]][0]) {
                Integer t = p[i];
                p[i] = p[0];
                p[0] = t;
            }
        }
        //sorting rest of the points in relation to being lefter to leftmost
        Integer leftmost = p[0];
        p = Arrays.copyOfRange(p, 1, n);
        mergeSort(leftmost, points, p);
        List<Integer> s = new ArrayList<>();
        s.add(leftmost);
        s.add(p[0]);
        for (int i = 1; i < p.length; i++) {
            while (orient(points[s.get(s.size() - 2)], points[s.get(s.size() - 1)], points[p[i]]) > 0) {
                s.remove(s.size() - 1);
            }
            s.add(p[i]);
        }
        return s;
    }

//    public static int binarySearch(List<Integer> p, Integer[][] points, int l, int r, int leftmost, int left) {
//        if (r >= l) {
//            int mid = l + (r - l) / 2;
//            if (!compare(left, points, mid, leftmost)) {
//                leftmost = mid;
//                return binarySearch(p, points, l, mid - 1, leftmost, left);
//            }
//            return binarySearch(p, points, mid + 1, r, leftmost, left);
//        }
//        return leftmost;
//    }
//
//    public static List<Integer> jarvis(Integer[][] points, List<List<Integer>> pp) {
//        int leftest = pp.get(0).get(0);
//        int chosenone = 0;
//        for (int i = 1; i < pp.size(); i++) {
//            System.out.println(points[leftest][0] + " " + points[pp.get(i).get(0)][0]);
//            if (points[leftest][0] > points[pp.get(i).get(0)][0]) {
//                chosenone = i;
//                leftest = pp.get(i).get(0);
//            }
//
//        }
//        System.out.println();
//        System.out.println(chosenone);
//        System.out.println();
//        List<Integer> p = new ArrayList<>();
//        Integer n = points.length;
//        for (Integer i = 0; i < n; i++) {
//            p.add(i);
//        }
//        for (Integer i = 0; i < n; i++) {
//            if (points[p.get(i)][0] < points[p.get(0)][0]) {
//                Integer t = p.get(i);
//                p.set(i, p.get(0));
//                p.set(0, t);
//            }
//        }
//        List<Integer> hull = new ArrayList<>();
//        hull.add(p.get(0));
//        p.remove(0);
//        p.add(hull.get(0));
//        while (true) {
//            int leftmost = 0;
//            for (int i = 1; i < p.size(); i++) {
//                if (orient(points[hull.get(hull.size() - 1)], points[p.get(leftmost)], points[p.get(i)]) > 0) {
//                    leftmost = i;
//                }
//            }
//            if (p.get(leftmost) == (hull.get(0))) {
//                break;
//            } else {
//                hull.add(p.get(leftmost));
//                p.remove(leftmost);
//            }
//        }
//        return hull;
//    }
}